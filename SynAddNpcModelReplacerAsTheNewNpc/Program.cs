using DynamicData;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Synthesis;

namespace SynAddNpcModelReplacerAsTheNewNpc
{
    public class Program
    {
        static Lazy<Settings> _settings = null!;
        internal static Settings Settings { get => _settings.Value; }

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings("Settings", "settings.json", out _settings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "SynAddNpcModelReplacerAsTheNewNpc.esp")
                .Run(args);
        }

        public class TargetFormKeyData
        {
            public FormKey FormKey;
            public NPCReplacerData? Data;
            public SearchReplacePair? Pair;
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            var data = Settings.SearchData;

            Console.WriteLine($"Search and modify model paths..");
            var aaList = new Dictionary<FormKey, TargetFormKeyData>();
            foreach (var context in state.LoadOrder.PriorityOrder.ArmorAddon().WinningContextOverrides())
            {
                var getter = context.Record;
                if (getter.WorldModel == null) continue;

                foreach (var target in data)
                {
                    IArmorAddon? aacache = null;

                    foreach((IModelGetter? worldModel, WorldModelGender genderFlag) in new[]
                    {
                        ( getter.WorldModel.Female, WorldModelGender.FemaleOnly ),
                        ( getter.WorldModel.Male, WorldModelGender.MaleOnly )
                    })
                    {
                        if ((target.NpcGender == genderFlag
                            || target.NpcGender == WorldModelGender.Any)
                            && worldModel != null
                            && !worldModel.File.IsNull
                            )
                        {
                            SearchReplacePair? pair = null;
                            foreach (var searchPair in target.SearchPairs)
                            {
                                if (!string.Equals(worldModel.File.RawPath,
                                    searchPair.SearchWorldModelPath, StringComparison.InvariantCultureIgnoreCase)) continue;

                                pair = searchPair;
                                break;
                            }

                            if (pair == null) continue;

                            // create copy of found aa with changed female wmodel path to replacer path
                            var aa = context.DuplicateIntoAsNewRecord(state.PatchMod);

                            var path = worldModel.File.DataRelativePath
                                .Replace(pair.SearchWorldModelPath!, pair.ReplaceWith, StringComparison.InvariantCultureIgnoreCase);

                            Model? tm = genderFlag == WorldModelGender.FemaleOnly ?
                                aa.WorldModel!.Female :
                                aa.WorldModel!.Male;

                            tm!.File.TrySetPath(path);
                            if(aacache == null) aa.EditorID = getter.EditorID + target.EDIDSuffix;

                            var d = new TargetFormKeyData
                            {
                                FormKey = aa.FormKey,
                                Data = target,
                                Pair = pair,
                            };

                            aaList.Add(getter.FormKey, d);

                            aacache = aa;
                        }
                    }
                }
            }
            Console.WriteLine($"Created {aaList.Count} modified skin aa");



            // search all armors referring found aa
            Console.WriteLine($"Process skins to use new models..");
            var aList = new Dictionary<FormKey, TargetFormKeyData>();
            foreach (var context in state.LoadOrder.PriorityOrder.Armor().WinningContextOverrides())
            {
                var getter = context.Record;

                if (!getter.MajorFlags.HasFlag(Armor.MajorFlag.NonPlayable)
                    && getter.BodyTemplate != null
                    && !getter.BodyTemplate.Flags.HasFlag(BodyTemplate.Flag.NonPlayable)) continue;
                if (getter.Armature.Count != 1) continue;
                if (aList.ContainsKey(getter.FormKey)) continue;

                var aafKey = getter.Armature[0].FormKey;
                if (!aaList.ContainsKey(aafKey)) continue;

                // create copy of found armors and relink aa there to changed aa
                var changed = context.DuplicateIntoAsNewRecord(state.PatchMod);

                changed.Armature.Clear();
                var aad = aaList[aafKey];
                changed.Armature.Add(aad.FormKey);
                changed.EditorID = getter.EditorID + aad.Data!.EDIDSuffix;

                var d = new TargetFormKeyData
                {
                    FormKey = changed.FormKey,
                    Data = aad.Data,
                    Pair = aad.Pair,
                };

                aList.Add(getter.FormKey, d);
            }
            Console.WriteLine($"Created {aList.Count} modified a skins");
        }
    }
}
